<?xml version="1.0"?>
<launch>

<!-- panda_base_sim.launch -->

  <!-- Gazebo & GUI Configuration -->
  <arg name="gazebo"      default="true"  doc="Should the gazebo simulation be launched? Use false in case if you want to include this file and launch gazebo yourself" />
  <arg name="headless"    default="false" doc="Should the gazebo GUI be launched?" />
  <arg name="paused"      default="false" doc="Should the simulation directly be stopped at 0s?" />
  <arg name="world"       default="worlds/empty.world" doc="Filename to a SDF World for gazebo to use" />
  <arg name="rviz"        default="true" doc="Should RVIz be launched?" />

  <!-- Robot Customization -->
  <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
  <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
  <arg name="controller"  default="cartesian_impedance_example_controller"     doc="Which example controller should be started? (One of {cartesian_impedance,model,force,joint_position,joint_velocity}_example_controller)" />
 
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
  <arg name="spawn_x" default="0" doc="X position for spawning the robot in [m]" />
  <arg name="spawn_y" default="0" doc="Y position for spawning the robot in [m]" />
  <arg name="spawn_z" default="0.31" doc="Z position for spawning the robot in [m]" />
  <arg name="spawn_roll" default="0" doc="Roll orientation for spawning the robot in [rad]" />
  <arg name="spawn_pitch" default="0" doc="Pitch orientation for spawning the robot in [rad]" />
  <arg name="spawn_yaw" default="0" doc="Yaw orientation for spawning the robot in [rad]" />


  <arg name="xacro_args"  default=""      doc="Additional arguments to pass to base_urdf.urdf.xacro" />
  <arg name="robot_name"  default="darko" doc="The name of the robot in the simulation" />
  <arg name="initial_joint_positions"
      doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
      default="   -J $(arg robot_name)::$(arg arm_id)_joint1 0
                  -J $(arg robot_name)::$(arg arm_id)_joint2 -0.785398163
                  -J $(arg robot_name)::$(arg arm_id)_joint3 0
                  -J $(arg robot_name)::$(arg arm_id)_joint4 -2.35619449
                  -J $(arg robot_name)::$(arg arm_id)_joint5 0
                  -J $(arg robot_name)::$(arg arm_id)_joint6 1.57079632679
                  -J $(arg robot_name)::$(arg arm_id)_joint7 0.785398163397
                  -J $(arg robot_name)::$(arg arm_id)_finger_joint1 0.001
                  -J $(arg robot_name)::$(arg arm_id)_finger_joint2 0.001"
  />
  <arg name="interactive_marker" default="$(eval arg('controller') == 'cartesian_impedance_example_controller')" doc="Should the interactive marker node be started?" />



  <!-- Gazebo Launch -->
  <group if="$(arg gazebo)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(arg world)"/>
      <arg name="paused" value="true"/>
      <arg name="gui" value="$(eval not arg('headless'))"/>
      <arg name="use_sim_time" value="true"/>
    </include>
  </group>


  <arg name="xacro_robot" default="base_panda.urdf.xacro"/>
  
  <param name="robot_description" 
         command="$(find xacro)/xacro '$(find panda_base_sim)/urdf/$(arg xacro_robot)' $(arg xacro_args)" />

  <!-- Load controller configurations -->
  <rosparam file="$(find panda_base_sim)/config/franka_hw_sim.yaml" subst_value="true" />
  <rosparam file="$(find panda_base_sim)/config/sim_controllers.yaml" subst_value="true" />


  <param name="m_ee" value="0.76" if="$(arg use_gripper)" />

  <!-- Spawn the robot model in Gazebo -->
  <node name="$(arg arm_id)_model_spawner"
      pkg="gazebo_ros"
      type="spawn_model"
      args="-param robot_description -urdf -model $(arg robot_name) $(arg unpause) 
      -x $(arg spawn_x) -y $(arg spawn_y) -z $(arg spawn_z) -R $(arg spawn_roll) -P $(arg spawn_pitch) -Y $(arg spawn_yaw)
      $(arg initial_joint_positions)"/>

  <!-- ARM nodes -->

  <!-- Spawn required ROS controllers -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_gripper_spawner"
        if="$(arg use_gripper)"
        args="franka_gripper"
        respawn="false"
  />

  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_controller_spawner"
        respawn="false" output="screen"
        args="--wait-for initialized franka_state_controller $(arg controller)"
  />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> 
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node> 

  <!-- Start the interactive marker node if required -->
  <node name="interactive_marker"
        pkg="panda_base_sim"
        type="interactive_marker.py"
        if="$(arg interactive_marker)">
    <param name="link_name" value="$(arg arm_id)_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <!-- RVIZ -->
  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find panda_base_sim)/robots/darko_plus_panda.rviz" if="$(arg rviz)"/>

</launch>
